#define F_CPU 16000000UL // define frequencia do microcontrolador em 16MHz

#include <avr/io.h>
#include <util/delay.h>
#include <avr/pgmspace.h> // para gravação de dados em memoria flash
#include <avr/interrupt.h> // para interrupção

// macros para trabalho com bit
#define set_bit(Y,bit_x)(Y|=(1<<bit_x))
#define clr_bit(Y,bit_x)(Y&=~(1<<bit_x))
#define tst_bit(Y,bit_x)(Y&(1<<bit_x))
#define cpl_bit(Y,bit_x)(Y^=(1<<bit_x))

#define DISPARO PB1  //definição de "variavel" DISPARO = Porta B 1
#define LED1 PD1
#define LED2 PD2
#define LED3 PD3

unsigned int Inicio_Sinal, DISTANCIA;
//----------------------------------------------------------------------------------------
ISR(Timer1_CAPT_vect)
{
    cpl_bit(TCCR1B,ICES1);

    if (!tst_bit(TCCR1B,ICES1)) //Lê o valor de contagem do TC1 na borda de subida de sinal
        Inicio_Sinal = ICR1; //salva a primeira contaem para determinar a largura do pulso
    else
        DISTANCIA = (ICR1 - Inicio_Sinal)/58; //ICR1 é a descida de sinal (sinal recebido) - incio do sinal(sinal enviado) / 58 => distancia
}
//----------------------------------------------------------------------------------------

int main()
{
    DDRD = 0b00001110; //portas D: 1,2 e 3 enviam sinal
    PORTD = 0b11110001;
    DDRB = 0b00000010;
    PORTB = 0b11111101;

    TCCR1B = (1<<ICES1)|(1<<CS11);
    TIMSK1 = 1<<ICIE1;
    sei();

   while(1)
   {
      set_bit(PORTB,DISPARO);//pulso de disparo
      _delay_us(10);//largura do pulso digital para iniciar o sensor vide pag. 239
      clr_bit(PORTB,DISPARO);//desativa o pulso digital

      if(DISTANCIA<431) // se o pulso recebido for menor que 25ms
      {
            if(DISTANCIA<100){ //se distancia do pulso for menor que 1m
              clr_bit(PORTD,LED2); // limpa o bit da variavel LED2
              clr_bit(PORTD,LED3); // limpa o bit da variavel LED3
              set_bit(PORTD,LED1); // incrementa o bit da variavel LED1
            }
            if(100<DISTANCIA<200){ //se distancia estiver entre 1 e 2m
              clr_bit(PORTD,LED1); // limpa o bit da variavel LED1
              clr_bit(PORTD,LED3); // limpa o bit da variavel LED3
              set_bit(PORTD,LED2); // incrementa o bit da variavel LED2
      }
      else
        clr_bit(PORTD,LED1); // limpa o bit da variavel LED1
        clr_bit(PORTD,LED2); // limpa o bit da variavel LED2
        set_bit(PORTD,LED3); // incrementa o bit da variavel LED3
      
      _delay_ms(50); // tempo minimo para uma nova medida de distancia
   }
  }
}
